var bmp280 = {
	
	address : 0x7,
	BMP280_REGISTER_CHIPID : 0xD0,
	BMP280_REGISTER_VERSION : 0xD1,
	BMP280_REGISTER_SOFTRESET : 0xE0,
	BMP280_REGISTER_CAL26 : 0xE1,
	BMP280_REGISTER_CONTROL : 0xF4,
	BMP280_REGISTER_CONFIG : 0xF5,
	BMP280_REGISTER_PRESSUREDATA : 0xF7,
	BMP280_REGISTER_TEMPDATA : 0xFA,
	
	
	
	init : function(obj) { 

		var m = require('mraa'); //require mraa

		obj.x = new m.I2c(1)
		obj.x.address(obj.address)

		// initialise device
		if (obj.x.readReg(obj.BMP280_REGISTER_CHIPID) != 0x58) {
		  console.log("WARNING!!!! INCOMPATBLE CHIPID!");
		}

		// we want to read temperature so write 0x2e into control reg
		obj.x.writeReg(obj.BMP280_REGISTER_CONTROL, 0x5F)
		obj.x.writeReg(obj.BMP280_REGISTER_CONFIG, 0x1C)

		//sleep
		obj.sleep(1000)
		
		obj.dig_T1 = obj.readU16(this, 0x88)
		obj.dig_T2 = obj.readS16(this, 0x8A)
		obj.dig_T3 = obj.readS16(this, 0x8C)
		obj.dig_P1 = obj.readU16(this, 0x8E)
		obj.dig_P2 = obj.readS16(this, 0x90)
		obj.dig_P3 = obj.readS16(this, 0x92)
		obj.dig_P4 = obj.readS16(this, 0x94)
		obj.dig_P5 = obj.readS16(this, 0x96)
		obj.dig_P6 = obj.readS16(this, 0x98)
		obj.dig_P7 = obj.readS16(this, 0x9A)
		obj.dig_P8 = obj.readS16(this, 0x9C)
		obj.dig_P9 = obj.readS16(this, 0x9E)
		
	},
	sleep : function(delay) {
		var start = new Date().getTime();
		while (new Date().getTime() < start + delay);
	},

	readU8 : function(obj, reg){
		result = obj.x.readReg(reg)
		return result
	},

	readS16 : function(obj, reg){
		lo = obj.readU8(obj, reg)
		hi = obj.readU8(obj, reg+1)
		a = []
		a[0] = (hi << 8) + lo
		var p = require('bufferpack')
		return p.unpack('h', p.pack('H', a))[0]
	},

	readU16 : function(obj, reg){
		lo = obj.readU8(obj, reg)
		hi = obj.readU8(obj, reg+1)
		return (hi << 8) + lo
	},
	
	readTemperatureData : function(obj){
		v1 = obj.x.readReg(obj.BMP280_REGISTER_TEMPDATA)
		v2 = obj.x.readReg(obj.BMP280_REGISTER_TEMPDATA+1)
		v3 = obj.x.readReg(obj.BMP280_REGISTER_TEMPDATA+2)
		adc_T = ((v1 << 16) | (v2<< 8) | v1) >> 4 //+ v3
		dig_T1 = obj.dig_T1
		dig_T2 = obj.dig_T2
		dig_T3 = obj.dig_T3
		var1 = ((((adc_T>>3) - (dig_T1<<1))) * (dig_T2)) >> 11;
		var2 = (((((adc_T>>4) - (dig_T1)) * ((adc_T>>4) - (dig_T1))) >> 12) *(dig_T3)) >> 14;
		t_f = var1 + var2
		T = (t_f * 5 + 128) >> 8;
		return { temp: T/100.00, tempFine : t_f}
	},

	readPressureData : function (obj, t_fine){
		v1 = obj.x.readReg(obj.BMP280_REGISTER_PRESSUREDATA)
		v2 = obj.x.readReg(obj.BMP280_REGISTER_PRESSUREDATA+1)
		v3 = obj.x.readReg(obj.BMP280_REGISTER_PRESSUREDATA+2)
		adc_P = ((v1 << 16) | (v2<< 8) | v1) >> 4 //+ v3
		var1 = (t_fine/2.0) - 64000.0;
		var2 = var1 * (var1 * (obj.dig_P6)/32768.0);	//not overflow
		var2 = var2 + (var1 * (obj.dig_P5)*2.0);	//overflow
		var2 = (var2/4.0)+((obj.dig_P4)*65536.0);
		var1 = ((obj.dig_P3) * var1 * var1/524288.0 + (obj.dig_P2) * var1) / 524288.0;
		t_var = (32768.0 + var1)/32768.0;
		tt_var = t_var * obj.dig_P1;
		var1 = ((32768.0 + var1)/32768.0)*(obj.dig_P1);
		p = 1048576.0- adc_P;
		p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
		var1 = (obj.dig_P9)*p*p/2147483648.0;	//overflow
		var2 = p*(obj.dig_P8)/32768.0;
		p = p + (var1+var2+(obj.dig_P7))/16.0;
		actualPressure = p/100.0 ;
		return actualPressure
	},

	readAltitude : function(obj, pressure){
		baseline=1013.2
		return( 44330.0 * ( 1 - Math.pow( pressure / baseline, 1 / 5.255 ) ) )
	}
	
}

module.exports = bmp280

bmp280.init(bmp280);
console.log(bmp280)

setInterval(function(){
	temp = bmp280.readTemperatureData(bmp280)
	pressure = bmp280.readPressureData(bmp280, temp.tempFine)
	alt = bmp280.readAltitude(bmp280, pressure)
	console.log('Temp:' + temp.temp + ', Pressure: '+ pressure + ', Altitude: '+ alt)
}, 1000)





